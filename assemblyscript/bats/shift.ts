import { MpZ } from "../src/mp";
import { assertSame } from "../src/assert";

// left shift
assertSame(MpZ.from("0x1") << 1, '0x2');
assertSame(MpZ.from("0x1234567890ABCDEF") << 0, '0x1234567890ABCDEF');
assertSame(MpZ.from("0x1234567890ABCDEF") << 4, '0x1234567890ABCDEF0');
assertSame(MpZ.from("0x1234567890ABCDEF") << 8, '0x1234567890ABCDEF00');
assertSame(MpZ.from("0x1234567890ABCDEF") << 32, '0x1234567890ABCDEF00000000');
assertSame(MpZ.from("0x1234567890ABCDEF") << 64, '0x1234567890ABCDEF0000000000000000');
assertSame(MpZ.from("0x1234567890ABCDEF") << 128, '0x1234567890ABCDEF00000000000000000000000000000000');

// right shift
assertSame(MpZ.from("0x2") >> 0x1, '0x1');
assertSame(MpZ.from("0x1234567890ABCDEF") >> 0, '0x1234567890ABCDEF');
assertSame(MpZ.from("0x1234567890ABCDEF") >> 4, '0x1234567890ABCDE');
assertSame(MpZ.from("0x1234567890ABCDEF") >> 8, '0x1234567890ABCD');
assertSame(MpZ.from("0x1234567890ABCDEF") >> 32, '0x12345678');
assertSame(MpZ.from("0x1234567890ABCDEF") >> 64, '0x0');

assertSame(MpZ.from("0x1234567890ABCDEF00000000000000000000000000000000") >> 0, '0x1234567890ABCDEF00000000000000000000000000000000');
assertSame(MpZ.from("0x1234567890ABCDEF00000000000000000000000000000000") >> 4, '0x1234567890ABCDEF0000000000000000000000000000000');
assertSame(MpZ.from("0x1234567890ABCDEF00000000000000000000000000000000") >> 8, '0x1234567890ABCDEF000000000000000000000000000000');
assertSame(MpZ.from("0x1234567890ABCDEF00000000000000000000000000000000") >> 32, '0x1234567890ABCDEF000000000000000000000000');
assertSame(MpZ.from("0x1234567890ABCDEF00000000000000000000000000000000") >> 64, '0x1234567890ABCDEF0000000000000000');
assertSame(MpZ.from("0x1234567890ABCDEF00000000000000000000000000000000") >> 128, '0x1234567890ABCDEF');
