version = 0.1
default-task = 'build'

[env]
RED = '\033[0;31m'
CHECK = 'printf "  ${GRN}OK${NC} " || printf "  ${RED}FAIL${NC} "'
BLUE = '\033[0;34m'
NC = '\033[0m'
GRN = '\033[0;32m'

[[task]]
name = 'build:##'
target = './build/##'
deps = [
    './bin/ff-##.ts',
    './src/**/*.ts',
]
run = '''
  deno compile --unstable --allow-env --allow-read -o $TARGET $DEP
'''

[[task]]
name = 'build'
deps = [
    './build/compile',
    './build/run',
    './build/execute',
    './build/preprocess',
]

[[task]]
name = 'compile'
dep = './build/compile'
run = '''
	./build/compile ../ff/example.ff | cmp --s - "../ff/example.ffb"
'''

[[task]]
name = 'execute'
dep = './build/execute'
run = '''
	./build/execute ../ff/example.ffb | cmp --s - "../ff/example.out"
'''

[[task]]
name = 'interpret'
dep = './build/run'
run = '''
	./build/run ../ff/example.ff | cmp --s - "../ff/example.out"
'''

[[task]]
name = 'test'
deps = [
    'build',
    ':compile',
    ':execute',
    ':interpret',
    ':ff',
    ':ff-opt',
]
serial = true
display = 'none'

[[task]]
name = 'ff'
deps = [
    '../ff/##.out',
    './build/run',
]
serial = true
invalidation = 'always'
validation = 'none'
display = 'status-only'
run = '''
  if [ -f ${DEP%.*}.ffp ]; then
    ./build/run ${DEP%.*}.ffp | cmp - $DEP -s && ${{CHECK}};
  fi
  if [ -f ${DEP%.*}.ff ]; then
    ./build/run ${DEP%.*}.ff | cmp - $DEP -s && ${{CHECK}};
  fi
'''

[[task]]
name = 'ff-opt'
deps = [
    '../ff/##.out',
    './build/run',
]
serial = true
invalidation = 'always'
validation = 'none'
display = 'status-only'
run = '''
  if [ -f ${DEP%.*}.ffp ]; then
    ./build/run ${DEP%.*}.ffp --opt | cmp - $DEP -s && ${{CHECK}};
  fi
  if [ -f ${DEP%.*}.ff ]; then
    ./build/run ${DEP%.*}.ff --opt | cmp - $DEP -s && ${{CHECK}};
  fi
'''

[[task]]
name = 'clean'
run = '''
  rm -rf ./build
'''
