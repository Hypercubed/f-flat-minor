version = 0.1
default-task = 'build:'

[[task]]
name = 'build:#'
dep = '#/chompfile.toml'
display = 'none'
validation = 'none'
run = 'chomp -c $DEP build'

[[task]]
name = 'test:#'
dep = '#/chompfile.toml'
serial = true
display = 'none'
run = '''
  echo "Running ${DEP} tests..."
  chomp -c $DEP test
  echo ""
  echo ""
'''

[[task]]
name = 'clean:#'
dep = '#/chompfile.toml'
validation = 'none'
run = 'chomp -c $DEP clean'

[[task]]
name = 'clean'
deps = ['clean:']
validation = 'none'
run = 'rm -rf build'

[[task]]
name = 'interpret:#'
dep = '#/chompfile.toml'
validation = 'none'
serial = true
run = '''
  chomp -c $DEP interpret
  echo ""
  echo ""
'''

[[task]]
name = 'execute:#'
dep = '#/chompfile.toml'
validation = 'none'
serial = true
run = '''
  chomp -c $DEP execute
  echo ""
  echo ""
'''

[[task]]
name = 'bench'
deps = ['build:deno', 'build:go', 'build:cpp', 'build:dart', 'build:racket']
validation = 'none'
serial = true
run = '''
  hyperfine --warmup 3\
    --export-markdown benchmarks.md\
    './cpp/build/fact' -n watermark\
    './go/build/execute --in ./ff/example.ffb' -n go\
    './cpp/build/run ./ff/example.ff' -n cpp\
    'cat ./ff/example_v0.ff | ./dart/bin/dart.exe' -n dart\
    'cat ./ff/example.ff | ./python/execute.py' -n python\
    './deno/build/execute ./ff/example.ffb' -n deno\
    'cat ./ff/example.ff | ./ruby/execute.rb' -n ruby\
    './racket/build/example' -n racket
'''

[[task]]
name = 'bench:execute'
deps = ['build:deno', 'build:go', 'build:cpp', 'build:racket']
validation = 'none'
serial = true
run = '''
  hyperfine --warmup 3 -N\
    './cpp/build/fact'\
    './deno/build/execute ./ff/example.ffb'\
    './go/build/execute --in ./ff/example.ffb'\
    './racket/build/example'
'''

[[task]]
name = 'bench:interp'
deps = ['build:deno', 'build:go', 'build:cpp', 'build:dart', 'build:racket']
validation = 'none'
serial = true
run = '''
  hyperfine --warmup 3 \
    './deno/build/run ./ff/example.ff'\
    './go/build/run --in ./ff/example.ff'\
    './cpp/build/run ./ff/example.ff'\
    'cat ./ff/example_v0.ff | ./dart/bin/dart.exe'\
    'cat ./ff/example.ff | ./python/execute.py'\
    'cat ./ff/example.ff | ./ruby/execute.rb'\
    'racket ./racket/main.rkt ./ff/example.ff'
'''

[[task]]
name = 'bench:compile'
deps = ['build:deno', 'build:go', 'build:cpp', 'build:dart', 'build:racket']
validation = 'none'
serial = true
run = '''
  hyperfine --warmup 3 -N\
    './deno/build/compile ./ff/example.ff'\
    './go/build/compile --in ./ff/example.ff'
'''

[[task]]
name = 'loc'
deps = ['clean']
validation = 'none'
run = 'cloc --force-lang-def=.cloc . --quiet --md --hide-rate > loc.md'

