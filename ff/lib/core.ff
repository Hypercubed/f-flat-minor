/* constants */
true: 1 ;
false: 0 ;

/* incrementors */

--: 1 - ;
++: 1 + ;
pred: dup -- ;
succ: dup ++ ;

/* shuffle words */

slip: q< eval q> ;
drop2: drop drop ;
swapd: q< swap q> ;
dupd: q< dup q> ;

dip: swap slip ; .inline /* [B] [A] dip  == A [B] */
dig: swapd swap ; .inline /* c b a -> b a c */
bury: swap swapd ; .inline /* c b a -> a c b */
rot: swap swapd swap ; .inline /* c b a -> a b c */
over: dupd swap ; .inline
dup2: over over ; .inline
run: dup slip ; .inline
nip: swap drop ; .inline
tuck: swap over ; .inline
sip: over slip ; .inline       /* b [A*] -> b a* b    (aka keep) */
sipd: q< sip q> ; .inline      /* c b [A*] -> c a* c b */
bi: q< over q< eval q> q> dig q< eval q> swap ; .inline
bi2: q< q< dup2 q> eval bury q> eval ; .inline


/* inquisitive */

not: 0 = ;
zero?: 0 = ;
truthy?: zero? not ; .inline
falsey?: zero? ; .inline
!=: = not ; .inline
nz?: zero? not ; .inline
divisor?: % zero? ; .inline
even?: 2 divisor? ; .inline
odd?: even? not ; .inline

/* comparison */
<=: > not ; .inline
>=: < not ; .inline

sort2: dup2 > [ swap ] ? ; .inline
min: sort2 drop ; .inline
max: sort2 nip ; .inline
clamp: dig max min ; .inline
between?: [ sort2 ] dip swap dupd < bury < and ; .inline

/* binary operators */

bxor: dup2 ~ & rot ~ & | ;

/* logical */

and: * truthy? ;
or: + truthy? ;
nand: * zero? ;
nor: + zero? ;

/* short circuit */

or_else: q< over slip swap q> swap [ drop2 true ] [ eval ] branch ; .inline
and_also: q< over slip swap q> swap [ eval ] [ drop2 false ] branch ; .inline

/* branching */

choose: rot [ swap ] ? drop ;
branch: choose eval ;
if: slip ? ;
ifte: slipd branch ;

/* stack */

empty?: depth zero? ;
pushtop: depth 1 > [ swap q< pushtop q> ] ? ;

/* counters */

_loop: dup [ -- q< dup q< eval q> q> _loop ] ? ;
loop: _loop drop ;

times: loop drop ;
seq: swap times ;

range: dupd swap - [ succ ] seq ;
count: 0 swap ++ [ succ ] seq drop ;

/* stack reduction */
tail!: q< clr q> ;
head!: [ drop ] reduce! ;

_reduce_r: depth 3 > [ dup slip _reduce_r ] ? ;
reduce_r!: _reduce_r eval ;
foldr!: pushtop reduce_r! ;

_reduce_l: depth 3 > [ swap q< _reduce_l dup slip q> swap ] ? ;
reduce_l!: _reduce_l eval ;
foldl!: pushtop reduce_l! ;

_map: depth 2 > [ swap q< _map dup slip q> swap ] ? ;
map!: _map eval ;

_filter: depth 2 > [ swap q< _filter over over eval not [ nip ] ? q> swap ] ? ;
filter!: _filter dupd eval not [ drop ] ? ;

reduce!: depth 2 - times ;

sum!: depth 1 > [ + sum! ] ? ;
product!: depth 1 > [ * product! ] ? ;
reverse!: depth 1 > [ q< reverse q> pushtop ] ? ;

/* math */
negitive?: 0 < ;
positive?: 0 > ;
sgn: dup positive? swap negitive? - ; .inline
abs: dup negitive? [ -1 * ] ? ; .inline
sqr: dup * ;
lg: dup 1 > [ 1 >> lg ++ ] [ drop 0 ] branch ;
!: dup [ dup -- ! * ] [ drop 1 ] branch ;
nck: dup2 - ! swap ! * [ ! ] dip / ;  /* n choose k */
divrem: [ / ] [ % ] bi2 ;

/* string printing */

space: 32 ;
newline: 10 ;

sp: space putc ;
cr: newline putc ;

_prints: dup [ putc _prints ] ? ;
prints: _prints drop ;
println: prints cr ;

ucase?: dup 'a' -- 'z' ++ dig between? ;
lcase?: dup 'A' -- 'Z' ++ dig between? ;

ucase: ucase? [ 32 - ] ? ;
lcase: lcase? [ 32 + ] ? ;