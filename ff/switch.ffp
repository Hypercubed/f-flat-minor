.load ./lib/core.ff

cond: q< sip swap q> swap [ eval ] [ drop ] branch ;

cond-test:
  [ 0 > ] [ 0 '\sis\spos' println ] cond
  [ 0 < ] [ 0 '\sis\sneg' println ] cond
  [ 0 = ] [ 0 '\sis\szero' println  ] cond
  drop
;

case:
  dig
  [ drop drop 1 ]
  [ [ dupd eval ] dip swap [ swap drop 1 ] [ drop 0 ] branch ]
  branch
;

case-default:
  [ true ] swap
  dig
  [ drop2 1 ]
  [ nip 1 ]
  branch
;

match: 0 swap eval drop ;
switch: match eval ;

match-test:
  [
    [ 0 > ] [ 0 '\sis\spos'  ] case
    [ 0 < ] [ 0 '\sis\sneg'  ] case
            [ 0 '\sis\szero' ] case-default
  ]
  match
;

switch-test:
  [
    [ 0 > ] [ 0 '\sis\spos'  ] case
    [ 0 < ] [ 0 '\sis\sneg'  ] case
            [ 0 '\sis\szero' ] case-default
  ]
  switch
;

-1 dup putn cond-test
0 dup putn cond-test
1 dup putn cond-test

-1 dup putn match-test eval println
0 dup putn match-test eval println
1 dup putn match-test eval println

-1 dup putn switch-test println
0 dup putn switch-test println
1 dup putn switch-test println