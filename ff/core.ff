/* incrementors */

--: 1 - ;
++: 1 + ;
pred: dup -- ;
succ: dup ++ ;

/* shuffle words */

slip: q< eval q> ;
dip: swap slip ;
swapd: q< swap q> ; 
roll: swap swapd ;
rot: q< swap q> swap ;
dup2: q< dup q> swap q< dup q> swap ;

/* inquisitive */

zero?: 0 = ;
divisor?: % zero? ;
even?: 2 divisor? ;
odd?: even? not ;

/* logical */

nand: * zero? ;
and: nand not ;
nor: + zero? ;
or: nor not ;
not: 0 = ;

/* branching */

choose: &swap ? drop ;
branch: choose eval ;
ifte: rot branch ;
if: &nop ifte ;

/* stack */

empty?: depth 0 = ;
one?: depth 1 = ;

tail: q< clr q> ;
head: &drop reduce ;

/* counters */

range_next: &succ dip range ;
range: dup2 = &range_next &drop ifte ;
count: 0 swap range ;

qq: q> dup q< ;
qappl: qq eval ;

reduce_repeat: qappl q> reduce ;
reduce: q< one? &reduce_repeat if ;

sum: &+ reduce ;
product: &* reduce ;

/* string printing */

print_f: putc print ;
print: dup &drop &print_f ifte ;
println: print 10 putc ;