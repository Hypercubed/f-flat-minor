/* incrementors */

--: 1 - ;
++: 1 + ;
pred: dup -- ;
succ: dup ++ ;

/* shuffle words */

slip: q< eval q> ;
dip: swap slip ;
swapd: q< swap q> ; 
roll: swap swapd ;
rot: q< swap q> swap ;
dupd: q< dup q> ;
dup2: dupd swap dupd swap ;
run: dup slip ;

/* inquisitive */

ne?: = ~ ;
eqz?: 0 = ;
divisor?: % eqz? ;
even?: 2 divisor? ;
odd?: even? ~ ;

/* logical */

~: 0 = ;
nand: * eqz? ;
and: nand ~ ;
nor: + eqz? ;
or: nor ~ ;

/* branching */

choose: &swap ? drop ;
branch: choose eval ;
ifte: rot branch ;

/* stack */

empty?: depth 0 = ;
one?: depth 1 = ;

tail: q< clr q> ;
head: &drop reduce ;

/* counters */

repeat_loop: run q> repeat_next ;
repeat_next: dup -- q< &repeat_loop ? ;
repeat: repeat_next q> drop drop ;  

range: dupd swap - &succ swap repeat ;
count: 0 swap ++ &succ swap repeat drop ;

reduce: depth 2 - repeat ;

sum: &+ reduce ;
product: &* reduce ;

/* math */
sqr: dup * ;

/* string printing */

print: dup &drop [ putc print ] ifte ;
println: print 10 putc ;