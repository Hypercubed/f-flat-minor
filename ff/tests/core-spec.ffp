.import ../lib/core.ff
.import ../lib/testing.ffp

0 'Shuffling' prints
    3 5 dup2 5 assert_eq 3 assert_eq 5 assert_eq 3 assert_eq

    1 2 3 bury 2 assert_eq 1 assert_eq 3 assert_eq
    1 2 3 rot 1 assert_eq 2 assert_eq 3 assert_eq

    5 [ 2 * ] [ 2 + ] bi 7 assert_eq 10 assert_eq
OK

0 'Derived\sMath' prints
    12 ! 479001600 assert_eq
    5 sqr 25 assert_eq

    0 sgn 0 assert_eq
    5 sgn 1 assert_eq
    -5 sgn -1 assert_eq

    0 abs 0 assert_eq
    5 abs 5 assert_eq
    -5 abs 5 assert_eq
OK

0 'log2' prints
    1 lg 0 assert_eq
    16 lg 4 assert_eq
    1024 lg 10 assert_eq
OK

0 'Large\slog2' prints
    52656145834278593348959013841835216159447547700274555627155488768 lg 215 assert_eq
OK

    true true and assert
    true false and assert_false
    false true and assert_false
    false false and assert_false

    true true or assert
    true false or assert
    false true or assert
    false false or assert_false
0 'Logical' prints OK

0 'Comparison' 
    1 2 <= assert
    2 2 <= assert
    6 6 >= assert
    8 7 >= assert

    1 5 max 5 assert_eq
    13 8 max 13 assert_eq
    1 5 min 1 assert_eq
    13 8 min 8 assert_eq

    5 10 1 clamp 5 assert_eq
    5 10 6 clamp 6 assert_eq
    5 10 11 clamp 10 assert_eq

    1 3 2 between? assert
    3 1 2 between? assert
    1 2 3 between? assert_false
    3 2 1 between? assert_false
prints OK

0 'Strings' prints 
    'a' ucase 'A' assert_eq
    'A' ucase 'A' assert_eq
    'Z' lcase 'z' assert_eq
    'z' lcase 'z' assert_eq
OK

0 'Control\sFlow' prints 
    true 5 8 choose 5 assert_eq
    false 5 8 choose 8 assert_eq

    5 true [ 3 + ] [ 3 - ] branch 8 assert_eq
    5 false [ 3 + ] [ 3 - ] branch 2 assert_eq
OK

0 'Folds' prints 
    1 2 3 sum! 6 assert_eq

    5 8 12 product! 480 assert_eq

    1 10 range [ - ] 0 foldr! 5 assert_eq
    1 10 range [ - ] 0 foldl! -55 assert_eq

    0 9 range [ 2 swap ^ ] map! [ + ] reduce! 1023 assert_eq

    0 [ succ ] 5 times sum! 15 assert_eq
    0 [ succ ++ ] 5 times sum! 30 assert_eq
OK
