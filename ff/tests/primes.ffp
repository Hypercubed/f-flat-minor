.import ../lib/core.ff
.import ../lib/primes.ffp

/* Fermat primality test */

fermat: dup -- rand ++ over -- ^ swap % 1 = ;

/* Wilson primality test */

wilson: [ 1 - ! 1 + ] [ divisor? ] bi ;

/* Millerâ€“Rabin primality test */

_factor_by_2:
  over 1 & 0 =
  [ [ 1 >> ] dip ++ _factor_by_2 ]
  ? ;

factor_by_2: 0 _factor_by_2 ; /* n -> d s */

nrand: over - rand + ;

^mod: swap ^ over % ;  /* n d a -> n a^d%n */

inner_witness_loop: /* s n x -> */
  dup2 swap %  /* s n x x%n */
  [ over ] dip swap /* s n x x%n n */
  -- = /* s n x x%n=n-1 */
  [ false ]
  [               /* s n x */
    dup *         /* s n x^2 */
    inner_witness
  ]
  branch ;

inner_witness: /* s n x -> */
  rot -- dup  /* x n s-1 s-1 -> */
  0 =         /* x n s-1 */
  [ true ]
  [ rot inner_witness_loop ]
  branch
;

/* returns true if composite, false if maybe prime */
witness_loop: /* n -> n */
  pred dup factor_by_2 /* n n-1 d s */
  dig 2 swap nrand /* n d s a */
  [ bury ] dip /* s n d a */
  ^mod /* s n a^d%n */
  dup [ 1 = ] [ over -- = ] or_else
    [ drop drop drop false ]
    [ inner_witness_loop nip nip nip ]
    branch ;

witness_loop2: [ witness_loop ] dup or_else ;
witness_loop4: [ witness_loop2 ] dup or_else ;
witness_loop8: [ witness_loop4 ] dup or_else ;
witness_loop16: [ witness_loop8 ] dup or_else ;

maybe_prime?: dup 4 <
  [ 1 > ]
  [ [ simple-composite? ] [ witness_loop2 ] or_else not ]
  branch ;

0 println
0 'Primes:' println

0 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */
1 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */
2 dup [ prime? ] [ maybe_prime? ] bi . clr /* true */
3 dup [ prime? ] [ maybe_prime? ] bi . clr /* true */
4 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */
5 dup [ prime? ] [ maybe_prime? ] bi . clr /* true */
6 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */
7 dup [ prime? ] [ maybe_prime? ] bi . clr /* true */
8 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */
9 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */
10 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */

28 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */
29 dup [ prime? ] [ maybe_prime? ] bi . clr /* true */
49 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */
97 dup [ prime? ] [ maybe_prime? ] bi . clr /* true */
98 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */

221 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */
223 dup [ prime? ] [ maybe_prime? ] bi . clr /* true */

561 dup [ prime? ] [ maybe_prime? ] bi . clr /* false  (Carmichael number) */

5853 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */

7727 dup [ prime? ] [ maybe_prime? ] bi . clr /* true */
7728 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */
7729 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */

8191 dup [ prime? ] [ maybe_prime? ] bi . clr /* true */
8192 dup [ prime? ] [ maybe_prime? ] bi . clr /* false */

131071 dup [ prime? ] [ maybe_prime? ] bi . clr /* true */
524287 dup [ prime? ] [ maybe_prime? ] bi . clr /* true */
6700417	dup [ prime? ] [ maybe_prime? ] bi . clr /* true */

2147483651 dup prime?
/* over maybe_prime? */
. clr  /* false */

2147483647 dup prime? 
/* over maybe_prime? */
. clr /* true */

0 println
0 'Next\sPrimes:' println

0 dup next-prime . clr /* 2 */
1 dup next-prime . clr /* 2 */
2 dup next-prime . clr /* 3 */
5 dup next-prime . clr /* 7 */
47 dup next-prime . clr /* 53 */
89 dup next-prime . clr /* 97 */
7727 dup next-prime . clr /* 7741 */
104743 dup next-prime . clr /* 104759 */

0 println
0 'N-th\sPrimes:' println

6 dup th-prime . clr /* 13 */
168 dup th-prime . clr /* 997 */
169 dup th-prime . clr /* 1009 */

/* work but too slow for interpreters tests */
/* 1000 dup th-prime . clr 7919 */
/* 10001 dup th-prime . clr 104743 */
/* 10002 dup th-prime . clr  104759 */


